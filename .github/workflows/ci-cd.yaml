name: CI/CD Pipeline

# Add these permissions at the workflow level
permissions:
  contents: read
  packages: write
  id-token: write    # Needed for kubectl authentication
  actions: write     # Needed for workflow

on:
    push:
      branches: 
        - '**'  # Runs on all branches
    pull_request:
      branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io/peacdo
  KUBE_NAMESPACE: library

jobs:
  build-and-deploy:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: peacdo
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/lib-backend:latest
          network: host
          build-args: |
            DOCKER_BUILDKIT=1
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/lib-frontend:latest
          network: host
          build-args: |
            DOCKER_BUILDKIT=1
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Deploy to Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          # Test connection first
          kubectl cluster-info
          
          # Create namespace if not exists
          kubectl create namespace library --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply with validation disabled and increased timeout
          kubectl apply -f k8s/ --validate=false --timeout=5m
          
          # Wait for resources to be ready
          kubectl wait --for=condition=ready pods --all -n library --timeout=5m
          
          # Verify deployment
          kubectl get pods,svc,ingress -n library 