name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  KUBE_NAMESPACE: library

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: library_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Backend tests
      - name: Install Backend Dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run Backend Tests
        working-directory: backend
        run: |
          npx prisma generate
          npx prisma migrate deploy
          npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/library_test
          NODE_ENV: test
          JWT_SECRET: test_secret

      # Frontend tests
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Frontend Tests
        working-directory: frontend
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/lib-backend:latest
            ${{ env.DOCKER_REGISTRY }}/lib-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/lib-frontend:latest
            ${{ env.DOCKER_REGISTRY }}/lib-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VITE_API_URL=/lib/api

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          echo "KUBECONFIG=kubeconfig.yaml" >> $GITHUB_ENV

      - name: Update Kubernetes Secret Values
        run: |
          echo "Updating secret values..."
          export DATABASE_URL=$(echo -n "${{ secrets.DATABASE_URL }}" | base64)
          export JWT_SECRET=$(echo -n "${{ secrets.JWT_SECRET }}" | base64)
          export POSTGRES_USER=$(echo -n "${{ secrets.POSTGRES_USER }}" | base64)
          export POSTGRES_PASSWORD=$(echo -n "${{ secrets.POSTGRES_PASSWORD }}" | base64)
          
          # Replace values in manifests
          for file in k8s/*.yaml; do
            sed -i "s|\${DATABASE_URL}|$DATABASE_URL|g" $file
            sed -i "s|\${JWT_SECRET}|$JWT_SECRET|g" $file
            sed -i "s|\${POSTGRES_USER}|$POSTGRES_USER|g" $file
            sed -i "s|\${POSTGRES_PASSWORD}|$POSTGRES_PASSWORD|g" $file
            sed -i "s|\${DOCKER_REGISTRY}|$DOCKER_REGISTRY|g" $file
            sed -i "s|\${TAG}|${{ github.sha }}|g" $file
            sed -i "s|\${KUBE_NAMESPACE}|$KUBE_NAMESPACE|g" $file
          done

      - name: Deploy to Kubernetes
        run: |
          echo "Creating namespace if it doesn't exist..."
          kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Applying Kubernetes manifests..."
          kubectl apply -f k8s/

      - name: Verify Deployment
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl -n $KUBE_NAMESPACE rollout status deployment/backend
          kubectl -n $KUBE_NAMESPACE rollout status deployment/frontend