name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  KUBE_NAMESPACE: library

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/lib-backend:${{ github.sha }}
        build-args: |
          NODE_ENV=production

    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/lib-frontend:${{ github.sha }}
        build-args: |
          NODE_ENV=production
          VITE_API_URL=/lib/api

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
        # Create namespace if it doesn't exist
        kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secrets if they don't exist
        kubectl create secret generic lib-secrets \
          --namespace $KUBE_NAMESPACE \
          --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
          --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Update image tags in manifests
        sed -i "s|\${DOCKER_REGISTRY}|$DOCKER_REGISTRY|g" k8s/*.yaml
        sed -i "s|\${TAG}|${{ github.sha }}|g" k8s/*.yaml
        
        # Apply manifests
        kubectl apply -f k8s/ 