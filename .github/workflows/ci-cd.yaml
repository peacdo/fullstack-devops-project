name: CI/CD Pipeline

permissions:
  contents: read
  packages: write
  id-token: write
  actions: write

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io/peacdo
  KUBE_NAMESPACE: library

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/lib-frontend:latest
          build-args: |
            NODE_ENV=production
            VITE_API_URL=/api
      
      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/lib-backend:latest

      - name: Setup Kubernetes Config
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          # Create namespace if not exists
          kubectl create namespace library --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets
        run: |
          export KUBECONFIG=kubeconfig.yaml
          
          # Create JWT secret
          kubectl create secret generic lib-secrets \
            --namespace library \
            --from-literal=jwt-secret=${{ secrets.JWT_SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create image pull secret
          kubectl create secret docker-registry ghcr-secret \
            --namespace library \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -
        
      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig.yaml
          
          # Delete existing pods to force pull new images
          kubectl delete pods -n library -l app=lib-frontend --grace-period=0 --force || true
          kubectl delete pods -n library -l app=lib-backend --grace-period=0 --force || true
          
          # Apply k8s manifests
          kubectl apply -f k8s/
          
          # Wait for resources
          kubectl wait --for=condition=ready pods --all -n library --timeout=5m